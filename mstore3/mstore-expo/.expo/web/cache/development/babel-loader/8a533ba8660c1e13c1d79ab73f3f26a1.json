{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectConsoleToReactotron = connectConsoleToReactotron;\nexports.getNotification = exports.getProductImage = exports.toast = exports.toggleDrawer = exports.closeDrawer = exports.openDrawer = exports.request = exports.error = exports.warn = exports.log = exports.Reactotron = exports.FacebookAPI = exports.BlockTimer = exports.Validate = exports.Timer = exports.EventEmitter = exports.IconIO = exports.Icon = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _reactotronReactNative = _interopRequireDefault(require(\"reactotron-react-native\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\n\nvar _MaterialCommunityIcons = _interopRequireDefault(require(\"@expo/vector-icons/MaterialCommunityIcons\"));\n\nvar _Ionicons = _interopRequireDefault(require(\"@expo/vector-icons/Ionicons\"));\n\nvar _reactTimerMixin = _interopRequireDefault(require(\"react-timer-mixin\"));\n\nvar _configureStore = _interopRequireDefault(require(\"@store/configureStore\"));\n\nvar _common = require(\"@common\");\n\nvar _Validate2 = _interopRequireDefault(require(\"./utils/Validate\"));\n\nvar _BlockTimer2 = _interopRequireDefault(require(\"./utils/BlockTimer\"));\n\nvar _FacebookAPI2 = _interopRequireDefault(require(\"./services/FacebookAPI\"));\n\nvar Icon = _MaterialCommunityIcons.default;\nexports.Icon = Icon;\nvar IconIO = _Ionicons.default;\nexports.IconIO = IconIO;\nvar EventEmitter = _reactNative.DeviceEventEmitter;\nexports.EventEmitter = EventEmitter;\nvar Timer = _reactTimerMixin.default;\nexports.Timer = Timer;\nvar Validate = _Validate2.default;\nexports.Validate = Validate;\nvar BlockTimer = _BlockTimer2.default;\nexports.BlockTimer = BlockTimer;\nvar FacebookAPI = _FacebookAPI2.default;\nexports.FacebookAPI = FacebookAPI;\nvar Reactotron = _reactotronReactNative.default;\nexports.Reactotron = Reactotron;\n\nvar _log = function _log(values) {\n  return __DEV__ && _reactotronReactNative.default.log(values);\n};\n\nvar _warn = function _warn(values) {\n  return __DEV__ && _reactotronReactNative.default.warn(values);\n};\n\nvar _error = function _error(values) {\n  return __DEV__ && _reactotronReactNative.default.error(values);\n};\n\nfunction connectConsoleToReactotron() {}\n\nvar log = _log;\nexports.log = log;\nvar warn = _warn;\nexports.warn = warn;\nvar error = _error;\nexports.error = error;\n\nvar request = function request(url) {\n  var data,\n      response,\n      _args = arguments;\n  return _regenerator.default.async(function request$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          data = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          _context.prev = 1;\n\n          _warn(url);\n\n          _context.next = 5;\n          return _regenerator.default.awrap(fetch(url, data));\n\n        case 5:\n          response = _context.sent;\n\n          _warn(response);\n\n          _context.next = 9;\n          return _regenerator.default.awrap(response.json());\n\n        case 9:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](1);\n\n          _error(_context.t0);\n\n          return _context.abrupt(\"return\", {\n            error: _context.t0\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 12]], Promise);\n};\n\nexports.request = request;\n\nvar openDrawer = function openDrawer() {\n  return _configureStore.default.dispatch({\n    type: _common.Constants.EmitCode.SideMenuOpen\n  });\n};\n\nexports.openDrawer = openDrawer;\n\nvar closeDrawer = function closeDrawer() {\n  return _configureStore.default.dispatch({\n    type: _common.Constants.EmitCode.SideMenuClose\n  });\n};\n\nexports.closeDrawer = closeDrawer;\n\nvar toggleDrawer = function toggleDrawer() {\n  return _configureStore.default.dispatch({\n    type: _common.Constants.EmitCode.SideMenuToggle\n  });\n};\n\nexports.toggleDrawer = toggleDrawer;\n\nvar toast = function toast(msg) {\n  var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4000;\n  return EventEmitter.emit(_common.Constants.EmitCode.Toast, msg, duration);\n};\n\nexports.toast = toast;\n\nvar getProductImage = function getProductImage(uri, containerWidth) {\n  var DPI_NUMBER = 0.5;\n\n  if (!_common.Config.ProductSize.enable) {\n    return uri;\n  }\n\n  if (typeof uri !== \"string\") {\n    return _common.Images.PlaceHolderURL;\n  }\n\n  var index = uri.lastIndexOf(\".\");\n  var editedURI = uri.slice(0, index);\n  var defaultType = uri.slice(index);\n\n  var pixelWidth = _reactNative.PixelRatio.getPixelSizeForLayoutSize(containerWidth);\n\n  switch (true) {\n    case pixelWidth * DPI_NUMBER < 300:\n      editedURI = editedURI + \"-small\" + defaultType;\n      break;\n\n    case pixelWidth * DPI_NUMBER < 600:\n      editedURI = editedURI + \"-medium\" + defaultType;\n      break;\n\n    case pixelWidth * DPI_NUMBER < 1400:\n      editedURI = editedURI + \"-large\" + defaultType;\n      break;\n\n    default:\n      editedURI += defaultType;\n  }\n\n  return editedURI;\n};\n\nexports.getProductImage = getProductImage;\n\nvar getNotification = function getNotification() {\n  var notification;\n  return _regenerator.default.async(function getNotification$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regenerator.default.awrap(_asyncStorage.default.getItem(\"@notification\"));\n\n        case 3:\n          notification = _context2.sent;\n          return _context2.abrupt(\"return\", JSON.parse(notification));\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\n\nexports.getNotification = getNotification;","map":{"version":3,"sources":["/Users/javadoge/mstore3/mstore-expo/src/Omni.js"],"names":["Icon","_Icon","IconIO","_IconIO","EventEmitter","DeviceEventEmitter","Timer","_Timer","Validate","_Validate","BlockTimer","_BlockTimer","FacebookAPI","_FacebookAPI","Reactotron","reactotron","_log","values","__DEV__","log","_warn","warn","_error","error","connectConsoleToReactotron","request","url","data","fetch","response","json","openDrawer","store","dispatch","type","Constants","EmitCode","SideMenuOpen","closeDrawer","SideMenuClose","toggleDrawer","SideMenuToggle","toast","msg","duration","emit","Toast","getProductImage","uri","containerWidth","DPI_NUMBER","Config","ProductSize","enable","Images","PlaceHolderURL","index","lastIndexOf","editedURI","slice","defaultType","pixelWidth","PixelRatio","getPixelSizeForLayoutSize","getNotification","AsyncStorage","getItem","notification","JSON","parse"],"mappings":"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","sourcesContent":["/** @format */\n\nimport reactotron from \"reactotron-react-native\";\nimport { PixelRatio, DeviceEventEmitter } from \"react-native\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport _Icon from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport _IconIO from \"@expo/vector-icons/Ionicons\";\nimport _Timer from \"react-timer-mixin\";\n\nimport store from \"@store/configureStore\";\nimport { Images, Constants, Config } from \"@common\";\nimport _Validate from \"./utils/Validate\";\nimport _BlockTimer from \"./utils/BlockTimer\";\nimport _FacebookAPI from \"./services/FacebookAPI\";\n\n// const { actions: SideMenuActions } = require('@redux/SideMenuRedux')\n\nexport const Icon = _Icon;\nexport const IconIO = _IconIO;\nexport const EventEmitter = DeviceEventEmitter;\nexport const Timer = _Timer;\nexport const Validate = _Validate;\nexport const BlockTimer = _BlockTimer;\nexport const FacebookAPI = _FacebookAPI;\nexport const Reactotron = reactotron;\n\nconst _log = (values) => __DEV__ && reactotron.log(values);\nconst _warn = (values) => __DEV__ && reactotron.warn(values);\nconst _error = (values) => __DEV__ && reactotron.error(values);\nexport function connectConsoleToReactotron() {\n  // console.log = _log;\n  // console.warn = _warn;\n  // console.error = _error;\n}\nexport const log = _log;\nexport const warn = _warn;\nexport const error = _error;\n\n/**\n * An async fetch with error catch\n * @param url\n * @param data\n * @returns {Promise.<*>}\n */\nexport const request = async (url, data = {}) => {\n  try {\n    _warn(url);\n    const response = await fetch(url, data);\n    _warn(response);\n    return await response.json();\n  } catch (err) {\n    _error(err);\n    return { error: err };\n  }\n};\n\n// Drawer\nexport const openDrawer = () =>\n  // EventEmitter.emit(Constants.EmitCode.SideMenuOpen)\n  store.dispatch({\n    type: Constants.EmitCode.SideMenuOpen,\n  });\nexport const closeDrawer = () =>\n  // EventEmitter.emit(Constants.EmitCode.SideMenuClose)\n  store.dispatch({\n    type: Constants.EmitCode.SideMenuClose,\n  });\nexport const toggleDrawer = () =>\n  // EventEmitter.emit(Constants.EmitCode.SideMenuClose)\n  store.dispatch({\n    type: Constants.EmitCode.SideMenuToggle,\n  });\n\n/**\n * Display the message toast-like (work both with Android and iOS)\n * @param msg Message to display\n * @param duration Display duration\n */\nexport const toast = (msg, duration = 4000) =>\n  EventEmitter.emit(Constants.EmitCode.Toast, msg, duration);\n\nexport const getProductImage = (uri, containerWidth) => {\n  // Enhance number if you want to fetch a better quality image (may affect performance\n  const DPI_NUMBER = 0.5; // change this to 1 for high quality image\n\n  if (!Config.ProductSize.enable) {\n    return uri;\n  }\n\n  if (typeof uri !== \"string\") {\n    return Images.PlaceHolderURL;\n  }\n\n  // parse uri into parts\n  const index = uri.lastIndexOf(\".\");\n  let editedURI = uri.slice(0, index);\n  const defaultType = uri.slice(index);\n\n  const pixelWidth = PixelRatio.getPixelSizeForLayoutSize(containerWidth);\n\n  switch (true) {\n    case pixelWidth * DPI_NUMBER < 300:\n      editedURI = `${editedURI}-small${defaultType}`;\n      break;\n    case pixelWidth * DPI_NUMBER < 600:\n      editedURI = `${editedURI}-medium${defaultType}`;\n      break;\n    case pixelWidth * DPI_NUMBER < 1400:\n      editedURI = `${editedURI}-large${defaultType}`;\n      break;\n    default:\n      editedURI += defaultType;\n  }\n  return editedURI;\n};\n\nexport const getNotification = async () => {\n  try {\n    const notification = await AsyncStorage.getItem(\"@notification\");\n    return JSON.parse(notification);\n  } catch (error) {\n    // console.log(error);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}